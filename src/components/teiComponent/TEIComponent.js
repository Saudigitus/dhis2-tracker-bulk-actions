import { CenteredContent, CircularLoader } from '@dhis2/ui'
import React, { useContext, useEffect, useState } from 'react'
// eslint-disable-next-line import/extensions
import { useCreateEnrollment } from '../../hooks/tei/useCreateEnrollment'
// eslint-disable-next-line import/extensions
import { useGetAttributes } from '../../hooks/tei/useGetAttributes'
// eslint-disable-next-line import/extensions
import useGetTEIType from '../../hooks/tei/useGetTEIType'
// eslint-disable-next-line import/extensions
import { organizeAttributes } from '../../utils/commons/organizeAttributes'
// eslint-disable-next-line import/extensions
import TEIFormComponent from './TEIForm'
// eslint-disable-next-line import/extensions
import { AppBarContext } from '../../contexts'
import { useNavigate, useSearchParams } from 'react-router-dom'
import { GeneratedVaribles } from '../../contexts/GeneratedVaribles'
import { useGetPatternCode } from '../../hooks/tei/useGetPatternCode'

function typeView(type) {
    if (type === 'view') {
        return <span>View Enrollment</span>
    }
    if (type === 'edit') {
        return <span>Edit Enrollment</span>
    } else {
        return <span>New Enrollment</span>
    }
}

const formCreate = (program, orgUnit, enrolledAt, TEIType, attributes) => ({
    trackedEntities: [
        {
            enrollments: [
                {
                    occurredAt: enrolledAt,
                    enrolledAt: enrolledAt,
                    program: program,
                    orgUnit: orgUnit,
                    attributes: attributes,
                    status: 'ACTIVE',
                    events: [],
                },
            ],
            orgUnit: orgUnit,
            trackedEntityType: TEIType,
        },
    ],
})

// const program = "IpHINAT79UW"
//const orgUnit = 'DiszpKrYNg8'
function TEIComponent(props) {
    const { autoGenerated, setautoGenerated } = useContext(GeneratedVaribles)
    let navigate = useNavigate()
    const [searchParams] = useSearchParams();
    const selectedOu = searchParams.get('ou');
    const processType = searchParams.get('processType');
    const { program } = props
    const { attributes = [], loading, enrollmentDateLabel } = useGetAttributes({ program })
    // eslint-disable-next-line react/prop-types
    const { type = 'save' } = props
    // const [form, setform] = useState({})
    const { teitype } = useGetTEIType(program)
    const { returnPattern } = useGetPatternCode(attributes)
    const [laodingCodes, setlaodingCodes] = useState(true)
    const { loading: loadingMutate, mutate } = useCreateEnrollment({
        message: 'Enrollment created successfully', onComplete: function (params) {
            searchParams.delete('processType')
            navigate(`/tei-dashboard?${searchParams.toString()}&tei=${params.bundleReport.typeReportMap.TRACKED_ENTITY.objectReports[0].uid}`)
        }
    })


    useEffect(() => {
        if (attributes.length > 0) {
            returnPattern(attributes, setlaodingCodes)
        }
    }, [loading])

    // console.log(setautoGenerated,autoGenerated);

    if (loading || laodingCodes) {
        return (
            <CenteredContent>
                <CircularLoader />
            </CenteredContent>
        )
    }

    async function createEnrollment(form) {
        await mutate({
            data: formCreate(
                program,
                selectedOu,
                form.enrollmentDate,
                teitype,
                organizeAttributes(form)
            ),
        })
    }

    return (
        <TEIFormComponent
            variables={attributes}
            enrollmentDate={enrollmentDateLabel}
            typeView={typeView(type)}
            type={type}
            processType={processType}
            loadingMutate={loadingMutate}
            createEnrollment={createEnrollment}
        />
    )
}

export default TEIComponent
